#!/bin/bash

# üöÄ Quick Deploy Script for OTA Analyzer
# –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–º–æ–∂–µ—Ç –±—ã—Å—Ç—Ä–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å –≤—Å—é —Å–∏—Å—Ç–µ–º—É –Ω–∞ Render

set -e

echo "üöÄ Quick Deploy OTA Analyzer –Ω–∞ Render"
echo "======================================"

# –¶–≤–µ—Ç–∞
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

log() {
    echo -e "${GREEN}[$(date +'%H:%M:%S')] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[$(date +'%H:%M:%S')] WARNING: $1${NC}"
}

error() {
    echo -e "${RED}[$(date +'%H:%M:%S')] ERROR: $1${NC}"
    exit 1
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
check_requirements() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π..."
    
    if ! command -v git &> /dev/null; then
        error "Git –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    fi
    
    if ! command -v node &> /dev/null; then
        error "Node.js –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    fi
    
    if ! command -v npm &> /dev/null; then
        error "npm –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    fi
    
    log "‚úÖ –í—Å–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
check_files() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞..."
    
    required_files=(
        "render-complete.yaml"
        "backend/package.json"
        "backend/server.js"
        "backend/init-db.sql"
        "Dockerfile.n8n.complete"
        "n8n-workflows/ota-analysis.json"
        "src/lib/api.js"
        "src/stores/auth-new.js"
        "src/stores/projects-new.js"
        "package.json"
    )
    
    for file in "${required_files[@]}"; do
        if [ ! -f "$file" ]; then
            error "–§–∞–π–ª $file –Ω–µ –Ω–∞–π–¥–µ–Ω"
        fi
    done
    
    log "‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –Ω–∞ –º–µ—Å—Ç–µ"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Git
setup_git() {
    log "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Git..."
    
    if [ ! -d ".git" ]; then
        error "–≠—Ç–æ –Ω–µ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ Git –∏ –¥–æ–±–∞–≤—å—Ç–µ remote origin"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å remote origin
    if ! git remote get-url origin &> /dev/null; then
        error "Remote origin –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ: git remote add origin https://github.com/your-username/ota-analyzer.git"
    fi
    
    log "‚úÖ Git –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
install_dependencies() {
    log "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    # Frontend dependencies
    if [ ! -d "node_modules" ]; then
        npm install
    fi
    
    # Backend dependencies
    if [ ! -d "backend/node_modules" ]; then
        cd backend
        npm install
        cd ..
    fi
    
    log "‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –¢–µ—Å—Ç–æ–≤–∞—è —Å–±–æ—Ä–∫–∞
test_build() {
    log "–¢–µ—Å—Ç–æ–≤–∞—è —Å–±–æ—Ä–∫–∞..."
    
    # –¢–µ—Å—Ç frontend —Å–±–æ—Ä–∫–∏
    if npm run build; then
        log "‚úÖ Frontend —Å–±–æ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–∞"
    else
        error "Frontend —Å–±–æ—Ä–∫–∞ –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å"
    fi
    
    # –¢–µ—Å—Ç backend
    cd backend
    if npm test 2>/dev/null || true; then
        log "‚úÖ Backend —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã"
    else
        warn "Backend —Ç–µ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å"
    fi
    cd ..
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ–∫—Ä–µ—Ç–æ–≤
generate_secrets() {
    log "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ–∫—Ä–µ—Ç–æ–≤..."
    
    # JWT Secret
    JWT_SECRET=$(openssl rand -base64 32)
    
    # n8n Encryption Key
    N8N_ENCRYPTION_KEY=$(openssl rand -base64 24)
    
    # Database Password
    DB_PASSWORD=$(openssl rand -base64 16)
    
    echo ""
    echo "üîê –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–µ–∫—Ä–µ—Ç—ã:"
    echo "=========================="
    echo "JWT_SECRET=$JWT_SECRET"
    echo "N8N_ENCRYPTION_KEY=$N8N_ENCRYPTION_KEY"
    echo "DB_PASSWORD=$DB_PASSWORD"
    echo ""
    
    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª
    cat > .env.secrets << EOF
# Generated secrets - DO NOT COMMIT TO GIT
JWT_SECRET=$JWT_SECRET
N8N_ENCRYPTION_KEY=$N8N_ENCRYPTION_KEY
DB_PASSWORD=$DB_PASSWORD
EOF
    
    log "‚úÖ –°–µ–∫—Ä–µ—Ç—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ .env.secrets"
}

# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é
show_deployment_instructions() {
    echo ""
    echo "üéØ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é –Ω–∞ Render:"
    echo "========================================="
    echo ""
    echo "1. üìù –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞:"
    echo "   - –ü–æ–ª—É—á–∏—Ç–µ OpenAI API –∫–ª—é—á: https://platform.openai.com/api-keys"
    echo "   - –°–æ–∑–¥–∞–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ Render: https://render.com"
    echo ""
    echo "2. üóÑÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:"
    echo "   - –í Render Dashboard: New ‚Üí PostgreSQL"
    echo "   - Name: ota-analyzer-db"
    echo "   - Plan: Free"
    echo "   - –°–∫–æ–ø–∏—Ä—É–π—Ç–µ Internal Database URL"
    echo ""
    echo "3. üîß –°–æ–∑–¥–∞–Ω–∏–µ Backend:"
    echo "   - New ‚Üí Web Service"
    echo "   - Connect GitHub repository"
    echo "   - Root Directory: backend"
    echo "   - Build Command: npm ci"
    echo "   - Start Command: npm start"
    echo ""
    echo "4. ‚öôÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ n8n:"
    echo "   - New ‚Üí Web Service"
    echo "   - Environment: Docker"
    echo "   - Dockerfile Path: Dockerfile.n8n.complete"
    echo ""
    echo "5. üé® –°–æ–∑–¥–∞–Ω–∏–µ Frontend:"
    echo "   - New ‚Üí Static Site"
    echo "   - Build Command: npm ci && npm run build"
    echo "   - Publish Directory: dist"
    echo ""
    echo "6. üîë Environment Variables:"
    echo "   –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ .env.secrets"
    echo ""
    echo "üìö –ü–æ–¥—Ä–æ–±–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: COMPLETE_DEPLOYMENT.md"
    echo ""
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –¥–µ–ø–ª–æ—é
check_deployment_readiness() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –¥–µ–ø–ª–æ—é..."
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã –Ω–∞ –º–µ—Å—Ç–µ
    check_files
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
    if [ ! -d "node_modules" ] || [ ! -d "backend/node_modules" ]; then
        error "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm install && cd backend && npm install"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —Å–µ–∫—Ä–µ—Ç—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã
    if [ ! -f ".env.secrets" ]; then
        warn "–°–µ–∫—Ä–µ—Ç—ã –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: ./quick-deploy.sh --generate-secrets"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –º–æ–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å –ø—Ä–æ–µ–∫—Ç
    if ! npm run build &> /dev/null; then
        error "–ü—Ä–æ–µ–∫—Ç –Ω–µ —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏"
    fi
    
    log "‚úÖ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ –¥–µ–ø–ª–æ—é"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    case "${1:-}" in
        "--generate-secrets")
            generate_secrets
            exit 0
            ;;
        "--check-only")
            check_requirements
            check_files
            setup_git
            check_deployment_readiness
            echo "‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!"
            exit 0
            ;;
        "--help"|"-h")
            echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–æ–ø—Ü–∏–∏]"
            echo ""
            echo "–û–ø—Ü–∏–∏:"
            echo "  --generate-secrets  –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ —Å–µ–∫—Ä–µ—Ç—ã"
            echo "  --check-only        –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å"
            echo "  --help, -h         –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
            echo ""
            echo "–ë–µ–∑ –æ–ø—Ü–∏–π: –ø–æ–ª–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –¥–µ–ø–ª–æ—é"
            exit 0
            ;;
    esac
    
    log "–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –∫ –¥–µ–ø–ª–æ—é..."
    
    check_requirements
    check_files
    setup_git
    install_dependencies
    test_build
    generate_secrets
    check_deployment_readiness
    
    echo ""
    log "üéâ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
    show_deployment_instructions
    
    echo ""
    echo "üöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
    echo "1. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –≤—ã—à–µ"
    echo "2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Environment Variables –≤ Render"
    echo "3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –¥–µ–ø–ª–æ–π"
    echo "4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É —Å–∏—Å—Ç–µ–º—ã"
    echo ""
    echo "üìû –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å: COMPLETE_DEPLOYMENT.md"
}

# –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
main "$@" 